# this python code is generated by ChatGPT on 2025.03.15
#This code is not directly used in the project, it is used to convert a PNG image into the RGB format


from PIL import Image

def rgb_to_rgb565(r, g, b):
    """Convert RGB (0-255) to RGB565 (5 bits red, 6 bits green, 5 bits blue)."""
    # Convert the RGB values to the RGB565 format
    r = (r >> 3) & 0x1F  # Red component: 5 bits
    g = (g >> 2) & 0x3F  # Green component: 6 bits
    b = (b >> 3) & 0x1F  # Blue component: 5 bits
    return (r << 11) | (g << 5) | b  # Combine into a 16-bit value


def convert_image_to_array(image_path, output_file):
    # Open the image
    img = Image.open(image_path)
    img = img.convert('RGB')  # Ensure the image is in RGB mode

    width, height = img.size
    if width != 320 or height != 240:
        raise ValueError("The image must be 320x240 pixels.")

    # Open the output file in write mode
    with open(output_file, 'w') as f:
        # Write the header of the C array
        f.write("const uint32_t image_data[240][320] = {\n")

        # Loop through all the pixels in the image
        for y in range(height):
            f.write("    {")  # Start of the row
            for x in range(width):
                r, g, b = img.getpixel((x, y))
                rgb565 = rgb_to_rgb565(r, g, b)

                # Debugging: Print the RGB and the RGB565 values to see what's going on
                print(f"Pixel ({x},{y}) - RGB: ({r},{g},{b}) -> RGB565: {rgb565:#06X}")

                # Write the RGB565 value as part of the row, using a 32-bit integer
                # The rest of the 16 bits in the integer will be zero.
                f.write(f"0x{rgb565:04X}0000, " if x < width - 1 else f"0x{rgb565:04X}0000")  # End the row properly
            f.write("},\n")

        # Close the array declaration
        f.write("};\n")

    print(f"C array has been written to {output_file}")


# Example usage
image_path = ""  # Replace with your PNG file
output_file = "image_data.c"  # The C file that will contain the pixel data
convert_image_to_array(image_path, output_file)
